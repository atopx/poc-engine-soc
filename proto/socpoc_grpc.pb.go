// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SocpocClient is the client API for Socpoc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocpocClient interface {
	Setenv(ctx context.Context, in *SetenvRequest, opts ...grpc.CallOption) (*SetenvResponse, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type socpocClient struct {
	cc grpc.ClientConnInterface
}

func NewSocpocClient(cc grpc.ClientConnInterface) SocpocClient {
	return &socpocClient{cc}
}

func (c *socpocClient) Setenv(ctx context.Context, in *SetenvRequest, opts ...grpc.CallOption) (*SetenvResponse, error) {
	out := new(SetenvResponse)
	err := c.cc.Invoke(ctx, "/proto.Socpoc/setenv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socpocClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/proto.Socpoc/execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocpocServer is the server API for Socpoc service.
// All implementations must embed UnimplementedSocpocServer
// for forward compatibility
type SocpocServer interface {
	Setenv(context.Context, *SetenvRequest) (*SetenvResponse, error)
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	mustEmbedUnimplementedSocpocServer()
}

// UnimplementedSocpocServer must be embedded to have forward compatible implementations.
type UnimplementedSocpocServer struct {
}

func (UnimplementedSocpocServer) Setenv(context.Context, *SetenvRequest) (*SetenvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setenv not implemented")
}
func (UnimplementedSocpocServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedSocpocServer) mustEmbedUnimplementedSocpocServer() {}

// UnsafeSocpocServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocpocServer will
// result in compilation errors.
type UnsafeSocpocServer interface {
	mustEmbedUnimplementedSocpocServer()
}

func RegisterSocpocServer(s grpc.ServiceRegistrar, srv SocpocServer) {
	s.RegisterService(&Socpoc_ServiceDesc, srv)
}

func _Socpoc_Setenv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetenvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocpocServer).Setenv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Socpoc/setenv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocpocServer).Setenv(ctx, req.(*SetenvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Socpoc_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocpocServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Socpoc/execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocpocServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Socpoc_ServiceDesc is the grpc.ServiceDesc for Socpoc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Socpoc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Socpoc",
	HandlerType: (*SocpocServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setenv",
			Handler:    _Socpoc_Setenv_Handler,
		},
		{
			MethodName: "execute",
			Handler:    _Socpoc_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/socpoc.proto",
}
